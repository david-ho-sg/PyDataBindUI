precision highp float;
precision lowp int;

uniform float horBlurWeight[5];
uniform float verBlurWeight[5];
uniform float brightness;
	
uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;

varying mediump vec2 TexCoord0;
varying mediump vec2 TexCoord1;
varying mediump vec2 TexCoord2;
varying mediump vec2 TexCoord3;
varying mediump vec2 TexCoord4;

void VerBlurPS()
{ 
	mediump vec4 blurryColor= texture2D(tex0, TexCoord0.xy) *  verBlurWeight[0];	
	blurryColor += texture2D(tex0, TexCoord1.xy) * verBlurWeight[1];
	blurryColor += texture2D(tex0, TexCoord2.xy) * verBlurWeight[2];
	blurryColor += texture2D(tex0, TexCoord3.xy) * verBlurWeight[3];
	blurryColor += texture2D(tex0, TexCoord4.xy) * verBlurWeight[4];
	gl_FragColor = blurryColor;
}             


void HorBlurPS()
{
	mediump vec4 blurryColor= texture2D(tex0, TexCoord0.xy) * horBlurWeight[0];
	blurryColor += texture2D(tex0, TexCoord1.xy) * horBlurWeight[1];
	blurryColor += texture2D(tex0, TexCoord2.xy) * horBlurWeight[2];
	blurryColor += texture2D(tex0, TexCoord3.xy) * horBlurWeight[3];
	blurryColor += texture2D(tex0, TexCoord4.xy) * horBlurWeight[4];
	gl_FragColor = blurryColor;
}

void BlendPS()
{ 
	vec4 c0 = texture2D(tex0, TexCoord0.xy);
	vec4 c1 = texture2D(tex1, TexCoord0.xy);
	vec4 c2 = texture2D(tex2, TexCoord0.xy);
	vec3 outline = c0.xyz - c1.xyz;
	outline = clamp(outline,vec3(0.0,0.0,0.0),vec3(1.0,1.0,1.0));
	gl_FragColor.xyz = c2.xyz + outline * brightness;
	gl_FragColor.w = 1.0;
}           