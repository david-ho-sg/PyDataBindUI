#include <metal_graphics>
#include <metal_texture>
#include <metal_matrix>
#include <metal_common>
using namespace metal;
#ifndef USE_SEPARATE_ALPHA
 #define USE_SEPARATE_ALPHA 0
#endif

struct PSConstants
{
float4 u_textColor;
};
struct PS_INPUT
{
float4 final_position [[position]];
float4 v_texture0;
float2 v_texture1;
};
fragment float4 metal_main(
PS_INPUT psIN[[stage_in]]
, constant PSConstants &constants[[buffer(0)]]
, texture2d<float> CC_Texture0 [[texture(0)]]
, sampler CC_Texture0_state [[sampler(0)]]
, texture2d<float> CC_Texture1 [[texture(1)]]
, sampler CC_Texture1_state [[sampler(1)]]
)
{
float4 final_color;
float3 local_0 = constants.u_textColor.xyz;
float local_1 = constants.u_textColor.w;
const float local_2 = 0.5f;
const float local_3 = 0.04f;
float local_4 = local_2 + local_3;
float local_5 = local_2 - local_3;
float4 local_6 = CC_Texture1.sample(CC_Texture1_state, psIN.v_texture1);
float4 local_7 = CC_Texture0.sample(CC_Texture0_state, psIN.v_texture1);
float4 local_8;
#if USE_SEPARATE_ALPHA
float local_9 = local_6.x;
float local_10 = local_6.y;
float local_11 = local_6.z;
float local_12 = local_6.w;
float3 local_13 = local_7.xyz;
float local_14 = local_7.w;
float4 local_15 = {local_13.x, local_13.y, local_13.z, local_9};
local_8 = local_15;
#else
local_8 = local_7;
#endif
float3 local_16 = local_8.xyz;
float local_17 = local_8.w;
float local_18 = smoothstep(local_5, local_4, local_17);
float local_19 = local_18 * local_1;
float4 local_20 = {local_0.x, local_0.y, local_0.z, local_19};
float4 local_21 = psIN.v_texture0 * local_20;
final_color = local_21;
return final_color;
}
