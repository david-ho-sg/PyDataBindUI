#include <metal_graphics>
#include <metal_texture>
#include <metal_matrix>
#include <metal_common>

using namespace metal;

#ifndef SEPARATE_ALPHA_TEX
#define SEPARATE_ALPHA_TEX 0
#endif

#ifndef NEED_POS_WORLD
#define NEED_POS_WORLD TRUE
#endif

#ifndef NEED_NORMAL_WORLD
#define NEED_NORMAL_WORLD TRUE
#endif

#ifndef SPECULAR_MAP_ENABLE
#define SPECULAR_MAP_ENABLE FALSE
#endif

#ifndef NORMAL_MAP_ENABLE
#define NORMAL_MAP_ENABLE FALSE
#endif

#ifndef USE_NORMAL_MAP
#define USE_NORMAL_MAP FALSE
#endif

#ifndef CUBE_MAP_ENABLE
#define CUBE_MAP_ENABLE FALSE
#endif

#ifndef RECEIVE_SHADOW
#define RECEIVE_SHADOW FALSE
#endif

#ifndef NEOX_GLASS_ENABLE
#define NEOX_GLASS_ENABLE FALSE
#endif


#ifndef HIGH_LEVEL_ENABLE
#define HIGH_LEVEL_ENABLE TRUE
#endif

#include "shaderlib/extension_metal.ps"

// UNIFORM
struct PSConstants
{
#if FOG_ENABLE
	float4 FogColor;
	float4 FogInfo;
	float HeightFogDensity;
	float4x4 view;
#endif
	float4 LightMapScale;
	float ShadowAlpha;
	float4x4 lightViewProj;

	float4 specular_control;
	float4 camera_pos;

	float3 light_dir;
	float normalmap_factor;

	float blendValue;
#if ALPHA_TEST_ENABLE
	float alphaRef;
#endif

};

#if FOG_ENABLE
#ifndef INSTANCE_TYPE_NONE
#define INSTANCE_TYPE_NONE 0
#define INSTANCE_TYPE_PRS 1 
#define INSTANCE_TYPE_PRS_LM 2
#define INSTANCE_TYPE_VEGETATION 3
#define INSTANCE_TYPE_PRS_SHADER 4
#define INSTANCE_TYPE_PRS_LM_SHADER 5
#endif


float3 CustomFogBlend(const float vsFogFactor, const float3 screen_clr, constant PSConstants &constants)
{
	float fogFactor = vsFogFactor * constants.FogColor.a;
	float3 result = screen_clr * (1.0 - fogFactor) + constants.FogColor.xyz * fogFactor;
	return result;
}

#ifndef NO_LIGHT_FOG
#define NO_LIGHT_FOG FALSE
#endif

float4 GetFogEx(float4 PositionWorld, constant PSConstants &constants)
{
    float4 PositionView = constants.view  * float4(PositionWorld.xyz, 1.0);
	float cam_pos = PositionView.z / PositionView.w;
	float distance_factor = clamp((cam_pos - constants.FogInfo.x) / (constants.FogInfo.y - constants.FogInfo.x), 0.0, 1.0) * constants.FogColor.a;
#if NO_LIGHT_FOG
	//float start_dis = constants.FogInfo.z * cam_pos / 800.0;
	//float end_dis = constants.FogInfo.w * cam_pos / 800.0;
	float height_factor = 0.0;
#else
	float height_factor = clamp((PositionWorld.y - constants.FogInfo.z) / (constants.FogInfo.w - constants.FogInfo.z), 0.0, 1.0) * constants.HeightFogDensity;
#endif

	float den_factor = fmax(height_factor, distance_factor);
	return float4(constants.FogColor.x, constants.FogColor.y, constants.FogColor.z, den_factor);
}

#endif

//VARYING
struct PS_INPUT
{
	float4 position [[position]];
	float4 UV0;
#if LIGHT_MAP_ENABLE
    float4 UV1;
#endif	

#if NEED_POS_WORLD
    float4 PosWorld;
#endif

#if NEED_NORMAL_WORLD
    float3 NormalWorld;
    #if USE_NORMAL_MAP
        float3 TangentWorld;
        float3 BinormalWorld;
    #endif
#endif

#if LIT_ENABLE
	float3 Lighting;
#endif

#if RECEIVE_SHADOW
    float4 PosLightProj;
#endif
};


#if RECEIVE_SHADOW
float UnpackRGBA2Float(float4 v)
{
	float4 vUnpack = float4(1.0, 1.0/256.0, 1.0/65536.0, 1.0/16777216.0);	//1/2^0, 1/2^8, 1/2^16, 1/2^24
	return dot(v, vUnpack);
}
#endif

fragment float4 metal_main(
	PS_INPUT psIN[[stage_in]],
	constant PSConstants &constants[[buffer(0)]],
	sampler SamplerDiffuse0 [[sampler(0)]],
	texture2d<float> texture0 [ [texture(0)] ],
#if LIGHT_MAP_ENABLE
	sampler SamplerLightmap1 [[sampler(1)]],
	texture2d<float> texture1 [ [texture(1)] ],
#endif
	sampler SamplerShadowmap2 [[sampler(2)]],
	texture2d<float> texture2 [ [texture(2)] ],

	sampler SamplerSpecularMap3 [[sampler(3)]],
	texture2d<float> texture3 [ [texture(3)] ],

	sampler SamplerNormalMap4 [[sampler(4)]],
	texture2d<float> texture4 [ [texture(4)] ],

	sampler SamplerCubeMap5 [[sampler(5)]],
	texturecube<float> texture5 [ [texture(5)] ],

	sampler SamplerMaterialMaskMap6 [[sampler(6)]],
	texture2d<float> texture6 [ [texture(6)] ],

	sampler SamplerSepAlphaTex7 [[sampler(7)]],
	texture2d<float> texture7 [ [texture(7)] ])
{
	float4 gl_FragColor = float4(0.0, 0.0, 0.0, 1.0);

    float4 albedo;
    albedo = texture0.sample(SamplerDiffuse0, psIN.UV0.xy);
    
    float res = 0;

#if SEPARATE_ALPHA_TEX
    float sepAlpha = texture7.sample(SamplerSepAlphaTex7, psIN.UV0.xy).a;
    albedo = float4(albedo.r, albedo.g, albedo.b, sepAlpha);
#endif

#if ALPHA_TEST_ENABLE
    float delta = albedo.a - constants.alphaRef;
    if (delta <= 0.0) {
        discard_fragment();
    }
#endif

#if HIGH_LEVEL_ENABLE
#ifdef NEED_NORMAL_WORLD
    float3 normal = psIN.NormalWorld.xyz;
#endif

#if USE_NORMAL_MAP
    float3 normalOffset = float3(0.0, 0.0, 1.0);
    normalOffset.xy = texture4.sample(SamplerNormalMap4, psIN.UV0.xy).xy; 
    normalOffset = normalOffset * 2.0 - 1.0;
    normalOffset.xy = float2(normalOffset.x, -normalOffset.y);
    normal = normalize(normalOffset.z * psIN.NormalWorld + normalOffset.x * psIN.TangentWorld + normalOffset.y * psIN.BinormalWorld);
    float LdotN_NormalMap = dot(-constants.light_dir.xyz, normal.xyz);
    float LdotN_Original = dot(-constants.light_dir.xyz, psIN.NormalWorld.xyz);
    float diff_ratio = 1.0 + (LdotN_NormalMap - LdotN_Original) * constants.normalmap_factor;
    albedo.xyz *= diff_ratio;
#endif
#endif

	gl_FragColor = albedo;

#if !HIGH_LEVEL_ENABLE

    float3 texColor2 = float3(0.0);
#if LIGHT_MAP_ENABLE
    float3 lightMapColor = texture1.sample(SamplerLightmap1, psIN.UV1.xy).xyz;
    texColor2 = lightMapColor * constants.LightMapScale.yzw;
#if LIT_ENABLE
    texColor2.xyz += psIN.Lighting.xyz;
#endif
    gl_FragColor.xyz *= texColor2;
#endif

#else

    //定义高光颜色
    float4 specColorRGB = float4(0.0, 0.0, 0.0, 1.0);

    #if SPECULAR_MAP_ENABLE
    float4 ViewDir = normalize(constants.camera_pos - psIN.PosWorld);
    float3 Hn = normalize(ViewDir.xyz - constants.light_dir.xyz);
    float NdotH = clamp(dot(normal, Hn), 0.0, 1.0) ;
    float4 specMapColor;
    specMapColor = texture3.sample(SamplerSpecularMap3, psIN.UV0.xy);

    specColorRGB.rgb = pow(NdotH, constants.specular_control.g) * specMapColor.rgb;

    #endif

    float shadowFactor = 0.0;

    #if RECEIVE_SHADOW
    float4 lightProjPos = psIN.PosLightProj;

    float2 shadowMapCoord = lightProjPos.xy;
    float depthToLight = lightProjPos.z;

    // float depthToLight =  (lightProjPos.z / lightProjPos.w + 1.0) / 2.0;
    // float2 shadowMapCoord = (lightProjPos.xy / lightProjPos.w + 1.0) / 2.0;
    // shadowMapCoord.y = 1 - shadowMapCoord.y;

    if ( 0.0 < shadowMapCoord.x && shadowMapCoord.x - 1.0 < 0.0 && 0.0 < shadowMapCoord.y && shadowMapCoord.y - 1.0 < 0.0 )
    {
        float depthInTex = texture2.sample(SamplerShadowmap2, shadowMapCoord).r;
        res = depthInTex;   
        shadowFactor = (depthInTex < depthToLight) ? 1.0 : 0.0;
    }
    
    #endif
    	
    #if RECEIVE_SHADOW
        shadowFactor *= constants.ShadowAlpha;
    #endif

    #if SPECULAR_MAP_ENABLE
    gl_FragColor.rgb = (albedo.rgb + specColorRGB.rgb);
    #else
    gl_FragColor.rgb = albedo.rgb;
    #endif

    #if CUBE_MAP_ENABLE
	float NdotV_origin = dot(ViewDir.xyz, normal);
	float3 reflectVector = normalize(2.0 * NdotV_origin * normal - ViewDir.xyz);
	float4 reflectColor = float4(0.0);
	reflectColor = texture5.sample(SamplerCubeMap5, reflectVector.xyz); 
    #endif

    #if CUBE_MAP_ENABLE
	float4 maskColor = texture6.sample(SamplerMaterialMaskMap6,psIN.UV0.xy);
	gl_FragColor.xyz = specColorRGB.rgb  + reflectColor.rgb * maskColor.r  + albedo.rgb * (1.0 - maskColor.r) ;
    #endif

		float3 texColor2 = float3(0.0);
    #if LIGHT_MAP_ENABLE
		float3 lightMapColor = texture1.sample(SamplerLightmap1, psIN.UV1.xy).xyz;
		texColor2 = lightMapColor * constants.LightMapScale.yzw;
        #if LIT_ENABLE
            texColor2.xyz += psIN.Lighting.xyz;
        #endif
        gl_FragColor.xyz *= texColor2;
    #endif

    #if NEOX_GLASS_ENABLE && CUBE_MAP_ENABLE
    	float refFactor = 1.0 - NdotV_origin;
    	refFactor *= refFactor;
    	refFactor *= refFactor;
    	gl_FragColor.a += refFactor * reflectColor.g * albedo.a ;
    #endif

        gl_FragColor.xyz *= ( 1.0 - shadowFactor);

#endif

#if FOG_ENABLE && NEED_POS_WORLD
	float4 retFog = GetFogEx(psIN.PosWorld, constants);
	gl_FragColor.xyz = mix(gl_FragColor.xyz, retFog.xyz, retFog.a);
#endif
    gl_FragColor.a *= constants.blendValue;

    // gl_FragColor = float4(res);
    // gl_FragColor.a = 1.0;

#if RECEIVE_SHADOW
    // gl_FragColor.rgb = raw_shadow(psIN.PosLightProj, constants.ShadowAlpha, texture2);
    // gl_FragColor.a = 1.0;
#endif

#if RECEIVE_SHADOW
    

    // gl_FragColor.xyz = psIN.PosLightProj.xyz;
    // gl_FragColor.w = 1;
#endif
    // gl_FragColor = float4(psIN.UV0.y, psIN.UV0.y, psIN.UV0.y,1);

    return gl_FragColor;
}
