//Blinn-phong
        
int GlobalParameter : SasGlobal
<
	string SasSuportedMacros = "UnSupported LIGHT_MAP_ENABLE UnSupported FALSE;";
>;
#define NO_SEMANTIC       0   
#define NEOX_NFX        1   
#define TEXCOORDPRECISIONWORKAROUND        0   

// -----------------------------------------------------------------------------
// Section: Platform constant availability
// -----------------------------------------------------------------------------
#define CONSTANT_VIEWPROJECTION			1
#define LIGHT_ATTR_ITEM_NUM				5

#if GPU_SKIN_ENABLE
	#ifndef MAX_BONES
		#define MAX_BONES 90
	#endif
	float4 worldPalette[MAX_BONES * 2] : SkinBones ;
#endif

#if NEOX_NFX
	#define DirectionalLightColor   ShadowLightAttr[1].rgb
#else
	#define DirectionalLightColor   DirLightAttr[1].rgb
#endif


// -----------------------------------------------------------------------------
// Section: Constant remapping in each engine
// -----------------------------------------------------------------------------

matrix4	World									: World ;
matrix4	View									: View ;
matrix4	InvWorld								: InverseWorld ;
matrix4	InvView									: InverseView ;
matrix4	Projection								: Projection ;
matrix4	ViewProjection							: ViewProjection ;
float4		CameraPos								: CameraPosition ;
float4		PlayerPos								: PlayerPosition ;
float4		ShadowLightAttr[LIGHT_ATTR_ITEM_NUM]	: ShadowLightAttr ;
float4		DirLightAttr[LIGHT_ATTR_ITEM_NUM]		: DirLightAttr ;
float4		Ambient									: Ambient ;
float4		ScreenSize4								: ScreenSize ;
float4		FogInfo									: FogInfo ;
float4		FogColor								: FogColor ;
bool		FogEnable								: FogEnable ;
float4		CameraInfo								:CameraInfo;
float4		ZBufferParams							:ZBufferParams;
float       blendValue                              :AlphaMtl< > =1.0f;

#if NEEDS_LIGHTMAP
	float4 LightMapScale : LightMapScale ;
	matrix4 LightMapTransform : LightMapTransform ;
#endif

matrix4 LightViewProjMatrix	: LightViewProj ;
//float ShadowAlpha = 0.625;

float3 LightDir : LightDirection ;

#define ScreenSize      ScreenSize4.xy
#define InvScreenSize   ScreenSize4.zw
#define CameraPosition	CameraPos.xyz
#define PlayerPosition  PlayerPos.xyz

float FarPlane;
float InvFarPlane;
float NearPlane;

#define FOG_ENABLE 1

#if !NEOX_NFX
	#define LightDir -LightDir
	#include "NeoXInclude/Fog.hlsl"
#endif
float4 ScalarUniformExpressions;
float4 VectorUniformExpressions[3];
float U
<
string SasUiLabel = "U";
string SasUiControl = "FloatPicker";
> = 3;

float V
<
string SasUiLabel = "V";
string SasUiControl = "FloatPicker";
> = 3;

float pick_one
<
string SasUiLabel = "one";
string SasUiControl = "FloatPicker";
> = 1;

float pickone
<
string SasUiLabel = "pickone";
string SasUiControl = "FloatPicker";
> = 5;

float4 color_1
<
string SasUiLabel = "color_1";
string SasUiControl = "ColorPicker";
> = (1, 0, 0, 1);

texture Tex0
<
string SasUiLabel = "Tex0";
string SasUiControl = "FilePicker";
>;

texture SMAP : ShadowMap;
SamplerTexture[0] = Tex0;
SamplerTexture[1] = SMAP;

SamplerAddressU[0] = ADDRESS_WRAP;
SamplerAddressV[0] = ADDRESS_WRAP;
SamplerFilter[0] = FILTER_TRILINEAR;
SamplerMipBias[0] = -1.0;


SamplerAddressU[1] = ADDRESS_CLAMP;
SamplerAddressV[1] = ADDRESS_CLAMP;
SamplerFilter[1] = FILTER_TRILINEAR;
SamplerMipBias[1] = -1.0;

         
technique TShader
{
	pass p0
	{
		
		VertexShader = "pickone_color.vs" vs_2_0 main;
		PixelShader = "pickone_color.ps" ps_2_0 main;
	}
}