# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
	new_instancemethod = lambda func, inst, cls: _tinyxml.SWIG_PyInstanceMethod_New(func)
else:
	from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
	def swig_import_helper():
		from os.path import dirname
		import imp
		fp = None
		try:
			fp, pathname, description = imp.find_module('_tinyxml', [dirname(__file__)])
		except ImportError:
			import _tinyxml
			return _tinyxml
		if fp is not None:
			try:
				_mod = imp.load_module('_tinyxml', fp, pathname, description)
			finally:
				fp.close()
				return _mod
	_tinyxml = swig_import_helper()
	del swig_import_helper
else:
	import _tinyxml
del version_info
try:
	_swig_property = property
except NameError:
	pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
	if (name == "thisown"): return self.this.own(value)
	if (name == "this"):
		if type(value).__name__ == 'SwigPyObject':
			self.__dict__[name] = value
			return
	method = class_type.__swig_setmethods__.get(name,None)
	if method: return method(self,value)
	if (not static) or hasattr(self,name):
		self.__dict__[name] = value
	else:
		raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
	return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
	if (name == "thisown"): return self.this.own()
	method = class_type.__swig_getmethods__.get(name,None)
	if method: return method(self)
	raise AttributeError(name)

def _swig_repr(self):
	try: strthis = "proxy of " + self.this.__repr__()
	except: strthis = ""
	return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
	_object = object
	_newclass = 1
except AttributeError:
	class _object : pass
	_newclass = 0


def _swig_setattr_nondynamic_method(set):
	def set_attr(self,name,value):
		if (name == "thisown"): return self.this.own(value)
		if hasattr(self,name) or (name == "this"):
			set(self,name,value)
		else:
			raise AttributeError("You cannot add attributes to %s" % self)
	return set_attr


try:
	import weakref
	weakref_proxy = weakref.proxy
except:
	weakref_proxy = lambda x: x


SWIG_BUILD_VERSION = 0x010339

class TiXmlVisitor(object):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	__repr__ = _swig_repr
	__swig_destroy__ = _tinyxml.delete_TiXmlVisitor
	def __init__(self): 
		if self.__class__ == TiXmlVisitor:
			_self = None
		else:
			_self = self
		_tinyxml.TiXmlVisitor_swiginit(self,_tinyxml.new_TiXmlVisitor(_self, ))
	def __disown__(self):
		self.this.disown()
		_tinyxml.disown_TiXmlVisitor(self)
		return weakref_proxy(self)
TiXmlVisitor.VisitEnter = new_instancemethod(_tinyxml.TiXmlVisitor_VisitEnter,None,TiXmlVisitor)
TiXmlVisitor.VisitExit = new_instancemethod(_tinyxml.TiXmlVisitor_VisitExit,None,TiXmlVisitor)
TiXmlVisitor.Visit = new_instancemethod(_tinyxml.TiXmlVisitor_Visit,None,TiXmlVisitor)
TiXmlVisitor_swigregister = _tinyxml.TiXmlVisitor_swigregister
TiXmlVisitor_swigregister(TiXmlVisitor)
cvar = _tinyxml.cvar
TIXML_MAJOR_VERSION = cvar.TIXML_MAJOR_VERSION
TIXML_MINOR_VERSION = cvar.TIXML_MINOR_VERSION
TIXML_PATCH_VERSION = cvar.TIXML_PATCH_VERSION

TIXML_SUCCESS = _tinyxml.TIXML_SUCCESS
TIXML_NO_ATTRIBUTE = _tinyxml.TIXML_NO_ATTRIBUTE
TIXML_WRONG_TYPE = _tinyxml.TIXML_WRONG_TYPE
TIXML_ENCODING_UNKNOWN = _tinyxml.TIXML_ENCODING_UNKNOWN
TIXML_ENCODING_UTF8 = _tinyxml.TIXML_ENCODING_UTF8
TIXML_ENCODING_LEGACY = _tinyxml.TIXML_ENCODING_LEGACY
class TiXmlBase(object):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
	__repr__ = _swig_repr
	__swig_destroy__ = _tinyxml.delete_TiXmlBase
	SetCondenseWhiteSpace = staticmethod(_tinyxml.TiXmlBase_SetCondenseWhiteSpace)
	IsWhiteSpaceCondensed = staticmethod(_tinyxml.TiXmlBase_IsWhiteSpaceCondensed)
	EncodeString = staticmethod(_tinyxml.TiXmlBase_EncodeString)
	TIXML_NO_ERROR = _tinyxml.TiXmlBase_TIXML_NO_ERROR
	TIXML_ERROR = _tinyxml.TiXmlBase_TIXML_ERROR
	TIXML_ERROR_OPENING_FILE = _tinyxml.TiXmlBase_TIXML_ERROR_OPENING_FILE
	TIXML_ERROR_OUT_OF_MEMORY = _tinyxml.TiXmlBase_TIXML_ERROR_OUT_OF_MEMORY
	TIXML_ERROR_PARSING_ELEMENT = _tinyxml.TiXmlBase_TIXML_ERROR_PARSING_ELEMENT
	TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME = _tinyxml.TiXmlBase_TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME
	TIXML_ERROR_READING_ELEMENT_VALUE = _tinyxml.TiXmlBase_TIXML_ERROR_READING_ELEMENT_VALUE
	TIXML_ERROR_READING_ATTRIBUTES = _tinyxml.TiXmlBase_TIXML_ERROR_READING_ATTRIBUTES
	TIXML_ERROR_PARSING_EMPTY = _tinyxml.TiXmlBase_TIXML_ERROR_PARSING_EMPTY
	TIXML_ERROR_READING_END_TAG = _tinyxml.TiXmlBase_TIXML_ERROR_READING_END_TAG
	TIXML_ERROR_PARSING_UNKNOWN = _tinyxml.TiXmlBase_TIXML_ERROR_PARSING_UNKNOWN
	TIXML_ERROR_PARSING_COMMENT = _tinyxml.TiXmlBase_TIXML_ERROR_PARSING_COMMENT
	TIXML_ERROR_PARSING_DECLARATION = _tinyxml.TiXmlBase_TIXML_ERROR_PARSING_DECLARATION
	TIXML_ERROR_DOCUMENT_EMPTY = _tinyxml.TiXmlBase_TIXML_ERROR_DOCUMENT_EMPTY
	TIXML_ERROR_EMBEDDED_NULL = _tinyxml.TiXmlBase_TIXML_ERROR_EMBEDDED_NULL
	TIXML_ERROR_PARSING_CDATA = _tinyxml.TiXmlBase_TIXML_ERROR_PARSING_CDATA
	TIXML_ERROR_DOCUMENT_TOP_ONLY = _tinyxml.TiXmlBase_TIXML_ERROR_DOCUMENT_TOP_ONLY
	TIXML_ERROR_STRING_COUNT = _tinyxml.TiXmlBase_TIXML_ERROR_STRING_COUNT
TiXmlBase.Print = new_instancemethod(_tinyxml.TiXmlBase_Print,None,TiXmlBase)
TiXmlBase.Row = new_instancemethod(_tinyxml.TiXmlBase_Row,None,TiXmlBase)
TiXmlBase.Column = new_instancemethod(_tinyxml.TiXmlBase_Column,None,TiXmlBase)
TiXmlBase.SetUserData = new_instancemethod(_tinyxml.TiXmlBase_SetUserData,None,TiXmlBase)
TiXmlBase.GetUserData = new_instancemethod(_tinyxml.TiXmlBase_GetUserData,None,TiXmlBase)
TiXmlBase.Parse = new_instancemethod(_tinyxml.TiXmlBase_Parse,None,TiXmlBase)
TiXmlBase_swigregister = _tinyxml.TiXmlBase_swigregister
TiXmlBase_swigregister(TiXmlBase)
TIXML_DEFAULT_ENCODING = cvar.TIXML_DEFAULT_ENCODING

def TiXmlBase_SetCondenseWhiteSpace(*args):
  return _tinyxml.TiXmlBase_SetCondenseWhiteSpace(*args)
TiXmlBase_SetCondenseWhiteSpace = _tinyxml.TiXmlBase_SetCondenseWhiteSpace

def TiXmlBase_IsWhiteSpaceCondensed():
  return _tinyxml.TiXmlBase_IsWhiteSpaceCondensed()
TiXmlBase_IsWhiteSpaceCondensed = _tinyxml.TiXmlBase_IsWhiteSpaceCondensed
TiXmlBase.utf8ByteTable = _tinyxml.cvar.TiXmlBase_utf8ByteTable

def TiXmlBase_EncodeString(*args):
  return _tinyxml.TiXmlBase_EncodeString(*args)
TiXmlBase_EncodeString = _tinyxml.TiXmlBase_EncodeString

class TiXmlNode(TiXmlBase):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
	__repr__ = _swig_repr
	DOCUMENT = _tinyxml.TiXmlNode_DOCUMENT
	ELEMENT = _tinyxml.TiXmlNode_ELEMENT
	COMMENT = _tinyxml.TiXmlNode_COMMENT
	UNKNOWN = _tinyxml.TiXmlNode_UNKNOWN
	TEXT = _tinyxml.TiXmlNode_TEXT
	DECLARATION = _tinyxml.TiXmlNode_DECLARATION
	TYPECOUNT = _tinyxml.TiXmlNode_TYPECOUNT
	__swig_destroy__ = _tinyxml.delete_TiXmlNode
	Value = property(_tinyxml.TiXmlNode_Value_get, _tinyxml.TiXmlNode_Value_set, None,
					"TiXmlNode.Value -> const char*\n\nThis is equivalent to calling the C++ methods:\n\tget: const char* TiXmlNode::Value()\n\tset: void TiXmlNode::SetValue(const char*)")


	NoChildren = property(_tinyxml.TiXmlNode_NoChildren_get, None, None,
					"TiXmlNode.NoChildren -> bool  (read-only)\n\nThis is equivalent to calling the C++ method:\n\tget: bool TiXmlNode::NoChildren()")

	Type = property(_tinyxml.TiXmlNode_Type_get, None, None,
					"TiXmlNode.Type -> int  (read-only)\n\nThis is equivalent to calling the C++ method:\n\tget: int TiXmlNode::Type()")

TiXmlNode.Clear = new_instancemethod(_tinyxml.TiXmlNode_Clear,None,TiXmlNode)
TiXmlNode.Parent = new_instancemethod(_tinyxml.TiXmlNode_Parent,None,TiXmlNode)
TiXmlNode.FirstChild = new_instancemethod(_tinyxml.TiXmlNode_FirstChild,None,TiXmlNode)
TiXmlNode.LastChild = new_instancemethod(_tinyxml.TiXmlNode_LastChild,None,TiXmlNode)
TiXmlNode.IterateChildren = new_instancemethod(_tinyxml.TiXmlNode_IterateChildren,None,TiXmlNode)
TiXmlNode.InsertEndChild = new_instancemethod(_tinyxml.TiXmlNode_InsertEndChild,None,TiXmlNode)
TiXmlNode.LinkEndChild = new_instancemethod(_tinyxml.TiXmlNode_LinkEndChild,None,TiXmlNode)
TiXmlNode.InsertBeforeChild = new_instancemethod(_tinyxml.TiXmlNode_InsertBeforeChild,None,TiXmlNode)
TiXmlNode.InsertAfterChild = new_instancemethod(_tinyxml.TiXmlNode_InsertAfterChild,None,TiXmlNode)
TiXmlNode.ReplaceChild = new_instancemethod(_tinyxml.TiXmlNode_ReplaceChild,None,TiXmlNode)
TiXmlNode.RemoveChild = new_instancemethod(_tinyxml.TiXmlNode_RemoveChild,None,TiXmlNode)
TiXmlNode.PreviousSibling = new_instancemethod(_tinyxml.TiXmlNode_PreviousSibling,None,TiXmlNode)
TiXmlNode.NextSibling = new_instancemethod(_tinyxml.TiXmlNode_NextSibling,None,TiXmlNode)
TiXmlNode.GetDocument = new_instancemethod(_tinyxml.TiXmlNode_GetDocument,None,TiXmlNode)
TiXmlNode.Clone = new_instancemethod(_tinyxml.TiXmlNode_Clone,None,TiXmlNode)
TiXmlNode.Accept = new_instancemethod(_tinyxml.TiXmlNode_Accept,None,TiXmlNode)
TiXmlNode_swigregister = _tinyxml.TiXmlNode_swigregister
TiXmlNode_swigregister(TiXmlNode)

class TiXmlAttribute(TiXmlBase):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	__repr__ = _swig_repr
	def __init__(self, *args): 
		_tinyxml.TiXmlAttribute_swiginit(self,_tinyxml.new_TiXmlAttribute(*args))
	Name = property(_tinyxml.TiXmlAttribute_Name_get, _tinyxml.TiXmlAttribute_Name_set, None,
					"TiXmlAttribute.Name -> const char*\n\nThis is equivalent to calling the C++ methods:\n\tget: const char* TiXmlAttribute::Name()\n\tset: void TiXmlAttribute::SetName(const char*)")


	Value = property(_tinyxml.TiXmlAttribute_Value_get, _tinyxml.TiXmlAttribute_Value_set, None,
					"TiXmlAttribute.Value -> const char*\n\nThis is equivalent to calling the C++ methods:\n\tget: const char* TiXmlAttribute::Value()\n\tset: void TiXmlAttribute::SetValue(const char*)")


	__swig_destroy__ = _tinyxml.delete_TiXmlAttribute
TiXmlAttribute.Next = new_instancemethod(_tinyxml.TiXmlAttribute_Next,None,TiXmlAttribute)
TiXmlAttribute.Previous = new_instancemethod(_tinyxml.TiXmlAttribute_Previous,None,TiXmlAttribute)
TiXmlAttribute.__eq__ = new_instancemethod(_tinyxml.TiXmlAttribute___eq__,None,TiXmlAttribute)
TiXmlAttribute.__lt__ = new_instancemethod(_tinyxml.TiXmlAttribute___lt__,None,TiXmlAttribute)
TiXmlAttribute.__gt__ = new_instancemethod(_tinyxml.TiXmlAttribute___gt__,None,TiXmlAttribute)
TiXmlAttribute_swigregister = _tinyxml.TiXmlAttribute_swigregister
TiXmlAttribute_swigregister(TiXmlAttribute)

class TiXmlElement(TiXmlNode):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	__repr__ = _swig_repr
	def __init__(self, *args): 
		_tinyxml.TiXmlElement_swiginit(self,_tinyxml.new_TiXmlElement(*args))
	__swig_destroy__ = _tinyxml.delete_TiXmlElement
TiXmlElement.Attribute = new_instancemethod(_tinyxml.TiXmlElement_Attribute,None,TiXmlElement)
TiXmlElement.SetAttribute = new_instancemethod(_tinyxml.TiXmlElement_SetAttribute,None,TiXmlElement)
TiXmlElement.RemoveAttribute = new_instancemethod(_tinyxml.TiXmlElement_RemoveAttribute,None,TiXmlElement)
TiXmlElement.FirstAttribute = new_instancemethod(_tinyxml.TiXmlElement_FirstAttribute,None,TiXmlElement)
TiXmlElement.LastAttribute = new_instancemethod(_tinyxml.TiXmlElement_LastAttribute,None,TiXmlElement)
TiXmlElement.GetText = new_instancemethod(_tinyxml.TiXmlElement_GetText,None,TiXmlElement)
TiXmlElement_swigregister = _tinyxml.TiXmlElement_swigregister
TiXmlElement_swigregister(TiXmlElement)

class TiXmlComment(TiXmlNode):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	__repr__ = _swig_repr
	def __init__(self, *args): 
		_tinyxml.TiXmlComment_swiginit(self,_tinyxml.new_TiXmlComment(*args))
	__swig_destroy__ = _tinyxml.delete_TiXmlComment
TiXmlComment_swigregister = _tinyxml.TiXmlComment_swigregister
TiXmlComment_swigregister(TiXmlComment)

class TiXmlText(TiXmlNode):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	__repr__ = _swig_repr
	__swig_destroy__ = _tinyxml.delete_TiXmlText
	def __init__(self, *args): 
		_tinyxml.TiXmlText_swiginit(self,_tinyxml.new_TiXmlText(*args))
	CDATA = property(_tinyxml.TiXmlText_CDATA_get, _tinyxml.TiXmlText_CDATA_set, None,
					"TiXmlText.CDATA -> bool\n\nThis is equivalent to calling the C++ methods:\n\tget: bool TiXmlText::CDATA()\n\tset: void TiXmlText::SetCDATA(bool)")


TiXmlText_swigregister = _tinyxml.TiXmlText_swigregister
TiXmlText_swigregister(TiXmlText)

class TiXmlDeclaration(TiXmlNode):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	__repr__ = _swig_repr
	def __init__(self, *args): 
		_tinyxml.TiXmlDeclaration_swiginit(self,_tinyxml.new_TiXmlDeclaration(*args))
	__swig_destroy__ = _tinyxml.delete_TiXmlDeclaration
TiXmlDeclaration.Version = new_instancemethod(_tinyxml.TiXmlDeclaration_Version,None,TiXmlDeclaration)
TiXmlDeclaration.Encoding = new_instancemethod(_tinyxml.TiXmlDeclaration_Encoding,None,TiXmlDeclaration)
TiXmlDeclaration.Standalone = new_instancemethod(_tinyxml.TiXmlDeclaration_Standalone,None,TiXmlDeclaration)
TiXmlDeclaration_swigregister = _tinyxml.TiXmlDeclaration_swigregister
TiXmlDeclaration_swigregister(TiXmlDeclaration)

class TiXmlUnknown(TiXmlNode):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	__repr__ = _swig_repr
	__swig_destroy__ = _tinyxml.delete_TiXmlUnknown
	def __init__(self, *args): 
		_tinyxml.TiXmlUnknown_swiginit(self,_tinyxml.new_TiXmlUnknown(*args))
TiXmlUnknown_swigregister = _tinyxml.TiXmlUnknown_swigregister
TiXmlUnknown_swigregister(TiXmlUnknown)

class TiXmlDocument(TiXmlNode):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	__repr__ = _swig_repr
	def __init__(self, *args): 
		_tinyxml.TiXmlDocument_swiginit(self,_tinyxml.new_TiXmlDocument(*args))
	__swig_destroy__ = _tinyxml.delete_TiXmlDocument
	Error = property(_tinyxml.TiXmlDocument_Error_get, None, None,
					"TiXmlDocument.Error -> bool  (read-only)\n\nThis is equivalent to calling the C++ method:\n\tget: bool TiXmlDocument::Error()")

	ErrorDesc = property(_tinyxml.TiXmlDocument_ErrorDesc_get, None, None,
					"TiXmlDocument.ErrorDesc -> const char*  (read-only)\n\nThis is equivalent to calling the C++ method:\n\tget: const char* TiXmlDocument::ErrorDesc()")

	ErrorId = property(_tinyxml.TiXmlDocument_ErrorId_get, None, None,
					"TiXmlDocument.ErrorId -> int  (read-only)\n\nThis is equivalent to calling the C++ method:\n\tget: int TiXmlDocument::ErrorId()")

	ErrorRow = property(_tinyxml.TiXmlDocument_ErrorRow_get, None, None,
					"TiXmlDocument.ErrorRow -> int  (read-only)\n\nThis is equivalent to calling the C++ method:\n\tget: int TiXmlDocument::ErrorRow()")

	ErrorCol = property(_tinyxml.TiXmlDocument_ErrorCol_get, None, None,
					"TiXmlDocument.ErrorCol -> int  (read-only)\n\nThis is equivalent to calling the C++ method:\n\tget: int TiXmlDocument::ErrorCol()")

	TabSize = property(_tinyxml.TiXmlDocument_TabSize_get, _tinyxml.TiXmlDocument_TabSize_set, None,
					"TiXmlDocument.TabSize -> int\n\nThis is equivalent to calling the C++ methods:\n\tget: int TiXmlDocument::TabSize()\n\tset: void TiXmlDocument::SetTabSize(int)")


TiXmlDocument.LoadFile = new_instancemethod(_tinyxml.TiXmlDocument_LoadFile,None,TiXmlDocument)
TiXmlDocument.SaveFile = new_instancemethod(_tinyxml.TiXmlDocument_SaveFile,None,TiXmlDocument)
TiXmlDocument.Parse = new_instancemethod(_tinyxml.TiXmlDocument_Parse,None,TiXmlDocument)
TiXmlDocument.RootElement = new_instancemethod(_tinyxml.TiXmlDocument_RootElement,None,TiXmlDocument)
TiXmlDocument.ClearError = new_instancemethod(_tinyxml.TiXmlDocument_ClearError,None,TiXmlDocument)
TiXmlDocument.Print = new_instancemethod(_tinyxml.TiXmlDocument_Print,None,TiXmlDocument)
TiXmlDocument_swigregister = _tinyxml.TiXmlDocument_swigregister
TiXmlDocument_swigregister(TiXmlDocument)

class TiXmlPrinter(TiXmlVisitor):
	thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
	__repr__ = _swig_repr
	def __init__(self): 
		_tinyxml.TiXmlPrinter_swiginit(self,_tinyxml.new_TiXmlPrinter())
	Indent = property(_tinyxml.TiXmlPrinter_Indent_get, _tinyxml.TiXmlPrinter_Indent_set, None,
					"TiXmlPrinter.Indent -> const char*\n\nThis is equivalent to calling the C++ methods:\n\tget: const char* TiXmlPrinter::Indent()\n\tset: void TiXmlPrinter::SetIndent(const char*)")


	LineBreak = property(_tinyxml.TiXmlPrinter_LineBreak_get, _tinyxml.TiXmlPrinter_LineBreak_set, None,
					"TiXmlPrinter.LineBreak -> const char*\n\nThis is equivalent to calling the C++ methods:\n\tget: const char* TiXmlPrinter::LineBreak()\n\tset: void TiXmlPrinter::SetLineBreak(const char*)")


	Size = property(_tinyxml.TiXmlPrinter_Size_get, None, None,
					"TiXmlPrinter.Size -> int  (read-only)\n\nThis is equivalent to calling the C++ method:\n\tget: int TiXmlPrinter::Size()")

	Str = property(_tinyxml.TiXmlPrinter_Str_get, None, None,
					"TiXmlPrinter.Str -> const char*  (read-only)\n\nThis is equivalent to calling the C++ method:\n\tget: const char* TiXmlPrinter::CStr()")

	__swig_destroy__ = _tinyxml.delete_TiXmlPrinter
TiXmlPrinter.SetStreamPrinting = new_instancemethod(_tinyxml.TiXmlPrinter_SetStreamPrinting,None,TiXmlPrinter)
TiXmlPrinter_swigregister = _tinyxml.TiXmlPrinter_swigregister
TiXmlPrinter_swigregister(TiXmlPrinter)



